CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(CopyExample)
INCLUDE(TestBigEndian)

if(WINDOWS)
	add_definitions(-DWINDOWS)
	file(GLOB OpenSSL_LIBS libs/win/openssl-1.0.1c/lib.${PROC}/*)
	set(OpenSSL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/libs/win/openssl-1.0.1c/inc.${PROC})
else()
	FIND_PACKAGE(OpenSSL REQUIRED)
endif()

SET(DIR_OBJECT ${PROJECT_SOURCE_DIR}/build)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${DIR_OBJECT})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${DIR_OBJECT})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${DIR_OBJECT})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DIR_OBJECT})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${DIR_OBJECT})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE  ${DIR_OBJECT})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${DIR_OBJECT})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${DIR_OBJECT})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${DIR_OBJECT})
SET(CMAKE_EXECUTABLE_OUTPUT_PATH ${DIR_OBJECT})
SET(CMAKE_EXECUTABLE_OUTPUT_PATH_DEBUG ${DIR_OBJECT})
SET(CMAKE_EXECUTABLE_OUTPUT_PATH_RELEASE ${DIR_OBJECT})

if(NOT WINDOWS)
	SET(CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FLAGS}")
endif()

if(APPLE)
	set(CMAKE_CXX_FLAGS "-Wno-switch -Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}")
endif()

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR} CloudApi)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/CloudApi/liboauthcpp/include)

ADD_SUBDIRECTORY(CloudApi)
ADD_SUBDIRECTORY(Example)
